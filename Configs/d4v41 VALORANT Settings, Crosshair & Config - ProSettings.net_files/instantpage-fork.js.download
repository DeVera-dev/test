/*!instant.page5.1-(c)2019 Alexandre Dieulot;https://instant.page/license;modified by Jacob Gross*/;(function(document,location,Date){'use strict'
const prefetcher=document.createElement('link')
if(!('closest'in prefetcher)||!('Set'in window))return
const head=document.head
head.appendChild(prefetcher)
const preloadedUrls=new Set()
let mouseoverTimer=0
let lastTouchTimestamp=0
let relList=prefetcher.relList
const supports=relList!==undefined&&relList.supports!==undefined
const isPrerenderSupported=supports&&relList.supports('prerender')
const preload=!supports||relList.supports('prefetch')?_prefetch:relList.supports('preload')?_preload:()=>{}
const connection=navigator.connection
const has3G=connection!==undefined&&connection.effectiveType.includes('3g')
const saveData=connection!==undefined&&(connection.saveData||connection.effectiveType.includes('2g'))
let dataset=document.body.dataset
const mousedownShortcut='instantMousedown'in dataset
const allowQueryString='instantAllowQueryString'in dataset
const allowExternalLinks='instantAllowExternalLinks'in dataset
const useViewport=!saveData&&'instantViewport'in dataset&&('instantViewportMobile'in dataset||document.documentElement.clientWidth*document.documentElement.clientHeight>450000)
const DELAY_TO_NOT_BE_CONSIDERED_A_TOUCH_INITIATED_ACTION=1111
const HOVER_DELAY='instantIntensity'in dataset?+dataset.instantIntensity:65
document.addEventListener('touchstart',touchstartListener,{capture:true,passive:true})
document.addEventListener('mouseover',mouseoverListener,{capture:true})
if(mousedownShortcut)document.addEventListener('mousedown',mousedownShortcutListener,{capture:true})
if(isPrerenderSupported)document.addEventListener('mousedown',mousedownListener,{capture:true})
if(useViewport&&window.IntersectionObserver&&'isIntersecting'in IntersectionObserverEntry.prototype){const PREFETCH_LIMIT=!has3G?('instantAllowExternalLinks'in dataset?+dataset.instantLimit:1/0):1
const SCROLL_DELAY='instantScrollDelay'in dataset?+dataset.instantScrollDelay:500
const THRESHOLD=0.75
const triggeringFunction=callback=>{requestIdleCallback(callback,{timeout:1500,})}
const hrefsInViewport=new Set()
let len=0
triggeringFunction(()=>{const intersectionObserver=new IntersectionObserver(entries=>{for(let i=0;i<entries.length;++i){const entry=entries[i]
const linkElement=entry.target
if(len>PREFETCH_LIMIT)return
if(entry.isIntersecting){hrefsInViewport.add(linkElement.href)
++len
setTimeout(()=>{if(!hrefsInViewport.has(linkElement.href))return
intersectionObserver.unobserve(linkElement)
preload(linkElement.href,false,true)},SCROLL_DELAY)}else{hrefsInViewport.delete(index)}}},{threshold:THRESHOLD})
const nodes=document.querySelectorAll('a')
for(let i=0;i<nodes.length;++i){const node=nodes[i]
if(isPreloadable(node)){intersectionObserver.observe(node)}}})}
dataset=relList=null
let isMobile=false
function touchstartListener(event){isMobile=true
lastTouchTimestamp=Date.now()
const linkElement=event.target.closest('a')
if(!isPreloadable(linkElement))return
window.addEventListener('scroll',mouseoutListener,{once:true})
mouseoverTimer=setTimeout(mouseoverTimeout.bind(undefined,linkElement,true),HOVER_DELAY)}
function mouseoverListener(event){if(Date.now()-lastTouchTimestamp<DELAY_TO_NOT_BE_CONSIDERED_A_TOUCH_INITIATED_ACTION)return
const linkElement=event.target.closest('a')
if(!isPreloadable(linkElement))return
linkElement.addEventListener('mouseout',mouseoutListener)
mouseoverTimer=setTimeout(mouseoverTimeout.bind(undefined,linkElement,false),HOVER_DELAY)}
function mouseoverTimeout(linkElement,important){if(isPrerenderSupported&&isMobile)prerender(linkElement.href,important)
else preload(linkElement.href,important,!(isMobile&&(saveData||has3G)))
mouseoverTimer=undefined}
function mouseoutListener(event){const target=event.target
if(event.relatedTarget&&target.closest('a')===event.relatedTarget.closest('a'))return
if(mouseoverTimer){clearTimeout(mouseoverTimer)
mouseoverTimer=undefined
return}
stopPreloading()}
function mousedownShortcutListener(event){if(Date.now()-lastTouchTimestamp<DELAY_TO_NOT_BE_CONSIDERED_A_TOUCH_INITIATED_ACTION)return
if(event.which>1||event.metaKey||event.ctrlKey)return
const linkElement=event.target.closest('a')
if(linkElement===null||'noInstant'in linkElement.dataset||linkElement.getAttribute('download')!==null)return
linkElement.addEventListener('click',ev=>{if(ev.detail===1337)return
ev.preventDefault()},{capture:true,once:true})
const customEvent=new MouseEvent('click',{bubbles:true,cancelable:true,detail:1337,view:window})
linkElement.dispatchEvent(customEvent)}
function mousedownListener(event){if(Date.now()-lastTouchTimestamp<DELAY_TO_NOT_BE_CONSIDERED_A_TOUCH_INITIATED_ACTION)return
if(event.which>1||event.metaKey||event.ctrlKey)return
const linkElement=event.target.closest('a')
if(!isPreloadable(linkElement,true))return
prerender(linkElement.href,true)}
function isPreloadable(linkElement,ignoreUrlCheck){let href
if(linkElement===null||!(href=linkElement.href))return false
if((!ignoreUrlCheck&&preloadedUrls.has(href))||href.charCodeAt(0)===35)return false
const preloadLocation=new URL(href)
if(!allowExternalLinks&&preloadLocation.origin!==location.origin&&!('instant'in linkElement.dataset))return false
if(preloadLocation.protocol!=='http:'&&preloadLocation.protocol!=='https:')return false
if(preloadLocation.protocol==='http:'&&location.protocol==='https:')return false
if(!allowQueryString&&preloadLocation.search&&!('instant'in linkElement.dataset))return false
if(preloadLocation.hash&&preloadLocation.pathname+preloadLocation.search===location.pathname+location.search)return false
if('noInstant'in linkElement.dataset)return false
if(linkElement.getAttribute('download')!==null)return false
return true}
function _prefetch(url,important,newTag){console.log('prefetch',url)
preloadedUrls.add(url)
let fetcher=prefetcher
if(newTag){fetcher=document.createElement('link')
head.appendChild(fetcher)}
fetcher.rel='prefetch'
fetcher.href=url
if(important)fetcher.setAttribute('importance','high')}
let speculationTag
function prerender(url,important){console.log('prerender',url)
prefetcher.rel='prerender prefetch'
prefetcher.href=url
if(important)prefetcher.setAttribute('importance','high')
if(isMobile){if(!speculationTag){speculationTag=document.createElement('script')
speculationTag.type='speculationrules'
head.appendChild(speculationTag)}
const obj={prerender:[{source:'list',urls:[url]}]}
speculationTag.textContent=JSON.stringify(obj)}}
function _preload(url,important,newTag){console.log('preload',url)
preloadedUrls.add(url)
let fetcher=prefetcher
if(newTag){fetcher=document.createElement('link')
head.appendChild(fetcher)}
fetcher.rel='preload'
fetcher.as='fetch'
fetcher.href=url}
function stopPreloading(){prefetcher.removeAttribute('rel')
prefetcher.removeAttribute('href')
prefetcher.removeAttribute('importance')}})(document,location,Date)